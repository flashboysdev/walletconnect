{
  "_args": [
    [
      {
        "raw": "qrcode-generator",
        "scope": null,
        "escapedName": "qrcode-generator",
        "name": "qrcode-generator",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\dusandj\\Desktop\\FLASHBOYS-CONNECT\\flashboys-connect-boilerplate"
    ]
  ],
  "_from": "qrcode-generator@latest",
  "_id": "qrcode-generator@1.4.0",
  "_inCache": true,
  "_location": "/qrcode-generator",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/qrcode-generator_1.4.0_1524662497343_0.6950344314223331"
  },
  "_npmUser": {
    "name": "kazuhikoarase",
    "email": "kazuhiko.arase@gmail.com"
  },
  "_npmVersion": "5.7.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "qrcode-generator",
    "scope": null,
    "escapedName": "qrcode-generator",
    "name": "qrcode-generator",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/qrcode-generator/-/qrcode-generator-1.4.0.tgz",
  "_shasum": "23521ae5d13658adb745a38f19e00c00f9b8488c",
  "_shrinkwrap": null,
  "_spec": "qrcode-generator",
  "_where": "C:\\Users\\dusandj\\Desktop\\FLASHBOYS-CONNECT\\flashboys-connect-boilerplate",
  "author": {
    "name": "Kazuhiko Arase"
  },
  "bugs": {
    "url": "https://github.com/kazuhikoarase/qrcode-generator/issues"
  },
  "dependencies": {},
  "description": "QR Code Generator implementation in JavaScript.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-sjjYaKTviJVps3xlnaDBx4xGEqVL0f6bRCd0Q2pPwCUzbrMZ5dXYOJAT7DqXGqXpb1p+vPV3nc122fAsAj6wug==",
    "shasum": "23521ae5d13658adb745a38f19e00c00f9b8488c",
    "tarball": "https://registry.npmjs.org/qrcode-generator/-/qrcode-generator-1.4.0.tgz",
    "fileCount": 8,
    "unpackedSize": 100602,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa4IDhCRA9TVsSAnZWagAAfv0QAJpl79JpCUYbIrHfPi1+\nD7mwdUne9Wz6R3H8DxUIE3Y3fHlAidm/C97AFes+wc1/wckIjbQ4e003iwmi\nH+p3E4Ew32WKteLp+B5WfTg1xdmo6NdqHd+DRbKSfG3BXHo8uPp+LDfSn8fz\nZSZcGCYdMonTng1o1E3KH6ELRDDkfyo7/x5rLskDd8fs7iCTKG096GYxYwoW\n0SuCRX3xdnvZ+odKo8Rd5ulz+IhnriXvjN43swBWhAL2wrl/WIyePbLmaWcB\nvgBf0tUlJLpAEWaWNevfhuJJjbZcx/7zGRxIab3pwJpzb+/OaSo5byrFJd4x\nGwfBKl8uEwRK0cBdtUBvuBw2hfCImgxvwu/4GuRCTBOKOf2vTx1Qf1M/cfCx\n+uStmHXU8AEYaKuNEvplviDDFIhEXwNQuCtr89t8ir3UoJWssuDcTBtKTlsQ\nWYS/BOrfHZM4dml36GI+ms/2M3AbQdjGionTiR4sz0ik3xJJz0YVGXbScWU3\nV7hzeEgH5jDaS1A04L031780nv5fcknmmWIzajvUIYctFMPr0q3MZLhK9NnT\naXczZ6bwAuQhuLqRPkfKWJ/Id8AKec2g/MtlerVVFSvc56bnnqre78zrWYGq\nofxdwVrO7FkZQKRtDldXuyJstZLeFxaCicfKu8hWLVoWKX0ys2Ys7WgG3AtD\nRdCv\r\n=mCZg\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/kazuhikoarase/qrcode-generator#readme",
  "keywords": [
    "qr",
    "qrcode",
    "generator"
  ],
  "license": "MIT",
  "main": "qrcode.js",
  "maintainers": [
    {
      "name": "kazuhikoarase",
      "email": "kazuhiko.arase@gmail.com"
    }
  ],
  "name": "qrcode-generator",
  "optionalDependencies": {},
  "readme": "QR Code Generator\n===\n\n## Getting Started\n\n1. Include qrcode.js in your html.\n2. Prepare a place holder.\n3. Generate QR and render it.\n\n```html\n<script type=\"text/javascript\" src=\"qrcode.js\"></script>\n```\n```html\n<div id=\"placeHolder\"></div>\n```\n```javascript\nvar typeNumber = 4;\nvar errorCorrectionLevel = 'L';\nvar qr = qrcode(typeNumber, errorCorrectionLevel);\nqr.addData('Hi!');\nqr.make();\ndocument.getElementById('placeHolder').innerHTML = qr.createImgTag();\n```\n## API Documentation\n\n### QRCodeFactory\n\n#### qrcode(typeNumber, errorCorrectionLevel) => <code>QRCode</code>\nCreate a QRCode Object.\n\n| Param                | Type                | Description                                    |\n| ---------------------| ------------------- | ---------------------------------------------- |\n| typeNumber           | <code>number</code> | Type number (1 ~ 40), or 0 for auto detection. |\n| errorCorrectionLevel | <code>string</code> | Error correction level ('L', 'M', 'Q', 'H')    |\n\n#### qrcode.stringToBytes(s) : <code>number[]</code>\nEncodes a string into an array of number(byte) using any charset.\nThis function is used by internal.\nOverwrite this function to encode using a multibyte charset.\n\n| Param  | Type                | Description      |\n| ------ | ------------------- | ---------------- |\n| s      | <code>string</code> | string to encode |\n\n### QRCode\n\n#### addData(data, mode) => <code>void</code>\nAdd a data to encode.\n\n| Param  | Type                | Description                                                |\n| ------ | ------------------- | ---------------------------------------------------------- |\n| data   | <code>string</code> | string to encode                                           |\n| mode   | <code>string</code> | Mode ('Numeric', 'Alphanumeric', 'Byte'(default), 'Kanji') |\n\n#### make() => <code>void</code>\nMake a QR Code.\n\n#### getModuleCount() => <code>number</code>\nThe number of modules(cells) for each orientation.\n_[Note] call make() before this function._\n\n#### isDark(row, col) => <code>boolean</code>\nThe module at row and col is dark or not.\n_[Note] call make() before this function._\n\n| Param | Type                | Description         |\n| ----- | ------------------- | ------------------- |\n| row   | <code>number</code> | 0 ~ moduleCount - 1 |\n| col   | <code>number</code> | 0 ~ moduleCount - 1 |\n\n#### createDataURL(cellSize, margin) => <code>string</code>\n#### createImgTag(cellSize, margin, alt) => <code>string</code>\n#### createSvgTag(cellSize, margin) => <code>string</code>\n#### createTableTag(cellSize, margin) => <code>string</code>\nHelper functions for HTML.\n _[Note] call make() before these functions._\n\n| Param    | Type                | Description           |\n| -------- | ------------------- | --------------------- |\n| cellSize | <code>number</code> | default: 2            |\n| margin   | <code>number</code> | default: cellSize * 4 |\n| alt      | <code>string</code> | (optional)            |\n\n#### renderTo2dContext(context, cellSize) => <code>void</code>\n\n--\n\nThe word 'QR Code' is registered trademark of DENSO WAVE INCORPORATED\n<br/>http://www.denso-wave.com/qrcode/faqpatent-e.html\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kazuhikoarase/qrcode-generator.git"
  },
  "types": "qrcode.d.ts",
  "version": "1.4.0"
}
